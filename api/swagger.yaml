basePath: /
consumes:
- application/json
- application/xml
definitions:
  InformationElectionDTO:
    description: election state information
    properties:
      algorithm:
        description: name of the algorithm used
        type: string
        x-go-name: Algorithm
      identity:
        description: uri of the identity sending this request
        type: string
        x-go-name: User
      job:
        $ref: '#/definitions/InformationJobDTO'
      message:
        description: something you want to tell the other one
        type: string
        x-go-name: Message
      payload:
        description: the payload for the current state of the algorithm
        type: string
        x-go-name: Payload
    required:
    - algorithm
    - payload
    - identity
    - job
    - message
    type: object
    x-go-package: gobully/internal/election
  InformationJobDTO:
    description: election job details
    properties:
      callback:
        description: an url where the initiator can be reached with the results/token
        type: string
        x-go-name: Callback
      data:
        description: data to use/post for the task
        type: string
        x-go-name: Data
      id:
        description: some identity chosen by the initiator to identify this request
        type: string
        x-go-name: Id
      message:
        description: something you want to tell the other one
        type: string
        x-go-name: Message
      method:
        description: method to take â€“ if already known
        type: string
        x-go-name: Method
      resource:
        description: uri or url to resource where actions are required
        type: string
        x-go-name: Resource
      task:
        description: uri to the task to accomplish
        type: string
        x-go-name: Task
    required:
    - id
    - task
    - resource
    - method
    - data
    - callback
    - message
    type: object
    x-go-package: gobully/internal/election
  InformationUserDTO:
    description: identity info struct
    properties:
      endpoint:
        description: user endpoint to send http request
        type: string
        x-go-name: Endpoint
      userId:
        description: user identification which should be unique
        type: string
        x-go-name: UserId
    required:
    - userId
    - endpoint
    type: object
    x-go-package: gobully/internal/identity
  RegisterInfoDTO:
    description: object sending id service to register yourself
    properties:
      distributing_user_id:
        description: id sending new id information (new userId or some other userId)
        type: string
        x-go-name: DistributingUserId
      endpoint:
        description: new userId endpoint
        type: string
        x-go-name: Endpoint
      new_user_id:
        description: new userId id, check if Distributing user is also new one to notify others if so
        type: string
        x-go-name: NewUserId
    required:
    - distributing_user_id
    - new_user_id
    - endpoint
    type: object
    x-go-package: gobully/internal/service
  RegisterResponseDTO:
    description: response object after register to id service
    properties:
      message:
        description: dummy message to print response
        type: string
        x-go-name: Message
      user_id_infos:
        description: all registered users
        items:
          $ref: '#/definitions/InformationUserDTO'
        type: array
        x-go-name: UserIdInfos
    required:
    - message
    - user_id_infos
    type: object
    x-go-package: gobully/internal/service
host: localhost
info:
  description: |-
    This project implements the bully algorithm with docker containers.
    Several containers are served, each of which is accessible with a rest API.
    For more information, see the code comments
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: there are no TOS at this moment, use at your own risk we take no responsibility
  title: gBully API
  version: 0.2.0
paths:
  /election:
    post:
      consumes:
      - application/json
      description: handle election algorithm state
      operationId: electionMessage
      parameters:
      - description: election algorithm - get a coordinator
        in: body
        name: election
        required: true
        schema:
          $ref: '#/definitions/InformationElectionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/InformationElectionDTO'
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
      - election
  /register:
    post:
      consumes:
      - application/json
      description: Register User information to service
      operationId: registerService
      parameters:
      - description: send register information to get in the network
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/RegisterInfoDTO'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/RegisterResponseDTO'
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
      - register
  /sendregister:
    post:
      consumes:
      - application/json
      description: User sends register request to another user and kick off election to get the new coordinator
      operationId: triggerRegisterToService
      parameters:
      - description: start election algorithm - to get a coordinator
        in: body
        name: electionInformation
        required: true
        schema:
          $ref: '#/definitions/InformationElectionDTO'
      - description: trigger registration, service sends registration message to other
        in: query
        name: ip
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
      - register
  /sendunregister:
    post:
      consumes:
      - application/json
      description: unregister yourself from other user service user lists
      operationId: sendUnregisterToServices
      parameters:
      - description: send unregister messages to others
        in: path
        name: service
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
      - register
  /startelection:
    post:
      consumes:
      - application/json
      description: execute election algorithm
      operationId: startElectionMessage
      parameters:
      - description: start election algorithm - to get a coordinator
        in: body
        name: election
        required: true
        schema:
          $ref: '#/definitions/InformationElectionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/InformationElectionDTO'
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
      - election
  /unregister:
    post:
      consumes:
      - application/json
      description: unregister service from your user list
      operationId: unregisterFromService
      parameters:
      - description: some service is unregistering from all users, remove user from active users
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/InformationUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
      - register
produces:
- application/json
- application/xml
schemes:
- http
- https
swagger: "2.0"
