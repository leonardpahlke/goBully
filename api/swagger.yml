basePath: /
consumes:
  - application/json
  - application/xml
definitions:
  InformationElectionDTO:
    description: election state information
    properties:
      algorithm:
        description: name of the algorithm used
        type: string
        x-go-name: Algorithm
      identity:
        description: uri of the identity sending this request
        type: string
        x-go-name: User
      job:
        $ref: "#/definitions/InformationJobDTO"
      message:
        description: something you want to tell the other one
        type: string
        x-go-name: Message
      payload:
        description: the payload for the current state of the algorithm
        type: string
        x-go-name: Payload
    required:
      - algorithm
      - payload
      - identity
      - job
      - message
    type: object
    x-go-package: goBully/internal/election
  InformationJobDTO:
    description: election job details
    properties:
      callback:
        description: an url where the initiator can be reached with the results/token
        type: string
        x-go-name: Callback
      data:
        description: data to use/post for the task
        type: string
        x-go-name: Data
      identity:
        description: some identity chosen by the initiator to identify this request
        type: string
        x-go-name: Id
      message:
        description: something you want to tell the other one
        type: string
        x-go-name: Message
      method:
        description: method to take â€“ if already known
        type: string
        x-go-name: Method
      resource:
        description: uri or url to resource where actions are required
        type: string
        x-go-name: Resource
      task:
        description: uri to the task to accomplish
        type: string
        x-go-name: Task
    required:
      - identity
      - task
      - resource
      - method
      - data
      - callback
      - message
    type: object
    x-go-package: goBully/internal/election
  InformationUserDTO:
    description: identity info struct
    properties:
      endpoint:
        description: user endpoint to send http request
        type: string
        x-go-name: Endpoint
      userId:
        description: user identification which should be unique
        type: string
        x-go-name: UserId
    required:
      - userId
      - endpoint
    type: object
    x-go-package: goBully/internal/identity
  InformationUserInfoDTO:
    description: get api user info
    properties:
      coordinator:
        description: set coordinator
        type: string
        x-go-name: Coordinator
      users:
        description: all user linked to the api
        items:
          $ref: "#/definitions/InformationUserDTO"
        type: array
        x-go-name: Users
    required:
      - users
    type: object
    x-go-package: goBully/internal/identity
  InputInformationElectionDTO:
    description: input election state information
    properties:
      job:
        $ref: "#/definitions/InformationJobDTO"
      message:
        description: something you want to tell the other one
        type: string
        x-go-name: Message
      payload:
        description: the payload for the current state of the algorithm
        type: string
        x-go-name: Payload
    required:
      - payload
      - job
      - message
    type: object
    x-go-package: goBully/internal/election
  MessageMutexDTO:
    description: mutex message
    properties:
      msg:
        description: message, reply-ok or request
        type: string
        x-go-name: Msg
      reply:
        description: url to the endpoint where responses shall be send
        type: string
        x-go-name: Reply
      time:
        description: the current lamport clock
        format: int32
        type: integer
        x-go-name: Time
      user:
        description: url to the user sending the message
        type: string
        x-go-name: User
    required:
      - msg
      - time
      - reply
      - user
    type: object
    x-go-package: goBully/internal/mutex
  RegisterInfoDTO:
    description: object sending id api to register yourself
    properties:
      distributing_user_id:
        description: id sending new id information (new userId or some other userId)
        type: string
        x-go-name: DistributingUserId
      endpoint:
        description: new userId endpoint
        type: string
        x-go-name: Endpoint
      new_user_id:
        description: new userId id, check if Distributing user is also new one to notify others if so
        type: string
        x-go-name: NewUserId
    required:
      - distributing_user_id
      - new_user_id
      - endpoint
    type: object
    x-go-package: goBully/internal/identity
  RegisterResponseDTO:
    description: response object after register to id api
    properties:
      message:
        description: dummy message to print response
        type: string
        x-go-name: Message
      user_id_infos:
        description: all registered users
        items:
          $ref: "#/definitions/InformationUserDTO"
        type: array
        x-go-name: UserIdInfos
    required:
      - message
      - user_id_infos
    type: object
    x-go-package: goBully/internal/identity
  StateMutexDTO:
    description: mutex state
    properties:
      state:
        description: "current state: released, wanting or held"
        type: string
        x-go-name: State
      time:
        description: the current lamport clock
        format: int32
        type: integer
        x-go-name: Time
    required:
      - state
      - time
    type: object
    x-go-package: goBully/internal/mutex
host: localhost
info:
  description: |-
    This project implements the bully algorithm with docker containers.
    Several containers are served, each of which is accessible with a rest API.
    For more information, see the code comments
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: there are no TOS at this moment, use at your own risk we take no responsibility
  title: gBully API
  version: 0.2.0
paths:
  /election:
    post:
      consumes:
        - application/json
      description: handle election algorithm state
      operationId: electionMessage
      parameters:
        - description: election algorithm - get a coordinator
          in: body
          name: election
          required: true
          schema:
            $ref: "#/definitions/InformationElectionDTO"
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/InformationElectionDTO"
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
        - election
  /mutex:
    post:
      consumes:
        - application/json
      description: handle mutex message
      operationId: mutexMessage
      parameters:
        - description: mutex message information
          in: body
          name: mutex
          required: true
          schema:
            $ref: "#/definitions/MessageMutexDTO"
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/MessageMutexDTO"
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
        - mutex
  /mutexstate:
    get:
      consumes:
        - application/json
      description: handle mutex a state request message
      operationId: mutexStateRequest
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/StateMutexDTO"
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
        - mutex
  /register:
    post:
      consumes:
        - application/json
      description: Register User information to api
      operationId: registerService
      parameters:
        - description: send register information to get in the network
          in: body
          name: register
          required: true
          schema:
            $ref: "#/definitions/RegisterInfoDTO"
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/RegisterResponseDTO"
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
        - user
  /sendregister:
    post:
      consumes:
        - application/json
      description: User sends register request to another user and kick off election to get the new coordinator
      operationId: triggerRegisterToService
      parameters:
        - description: trigger registration, api sends registration message to other
          in: query
          name: sendregister
          required: true
          type: number
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
        - user
  /sendunregister:
    post:
      consumes:
        - application/json
      description: unregister yourself from other user api user lists
      operationId: sendUnregisterToServices
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
        - user
  /startelection:
    post:
      consumes:
        - application/json
      description: execute election algorithm
      operationId: startElectionMessage
      parameters:
        - description: start election algorithm - to get a coordinator
          in: body
          name: startelection
          required: true
          schema:
            $ref: "#/definitions/InputInformationElectionDTO"
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/InformationElectionDTO"
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
        - election
  /startstaticelection:
    post:
      consumes:
        - application/json
      description: execute election algorithm with preset input
      operationId: startStaticElectionMessage
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/InformationElectionDTO"
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
        - election
  /unregister:
    post:
      consumes:
        - application/json
      description: unregister api from your user list
      operationId: unregisterFromService
      parameters:
        - description: some api is unregistering from all users, remove user from active users
          in: body
          name: unregister
          required: true
          schema:
            $ref: "#/definitions/InformationUserDTO"
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
        - user
  /users:
    get:
      consumes:
        - application/json
      description: Get registered user information's and coordinator
      operationId: users
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/InformationUserInfoDTO"
        "403":
          description: operation not available
        "404":
          description: error in operation
      tags:
        - user
produces:
  - application/json
  - application/xml
schemes:
  - http
  - https
swagger: "2.0"
