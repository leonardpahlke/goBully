// Code generated by go-swagger; DO NOT EDIT.

package register

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RegisterServiceHandlerFunc turns a function with the right signature into a register service handler
type RegisterServiceHandlerFunc func(RegisterServiceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterServiceHandlerFunc) Handle(params RegisterServiceParams) middleware.Responder {
	return fn(params)
}

// RegisterServiceHandler interface for that can handle valid register service params
type RegisterServiceHandler interface {
	Handle(RegisterServiceParams) middleware.Responder
}

// NewRegisterService creates a new http.Handler for the register service operation
func NewRegisterService(ctx *middleware.Context, handler RegisterServiceHandler) *RegisterService {
	return &RegisterService{Context: ctx, Handler: handler}
}

/*RegisterService swagger:route POST /register register registerService

Register User information to service

*/
type RegisterService struct {
	Context *middleware.Context
	Handler RegisterServiceHandler
}

func (o *RegisterService) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRegisterServiceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
