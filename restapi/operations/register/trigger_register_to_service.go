// Code generated by go-swagger; DO NOT EDIT.

package register

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// TriggerRegisterToServiceHandlerFunc turns a function with the right signature into a trigger register to service handler
type TriggerRegisterToServiceHandlerFunc func(TriggerRegisterToServiceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TriggerRegisterToServiceHandlerFunc) Handle(params TriggerRegisterToServiceParams) middleware.Responder {
	return fn(params)
}

// TriggerRegisterToServiceHandler interface for that can handle valid trigger register to service params
type TriggerRegisterToServiceHandler interface {
	Handle(TriggerRegisterToServiceParams) middleware.Responder
}

// NewTriggerRegisterToService creates a new http.Handler for the trigger register to service operation
func NewTriggerRegisterToService(ctx *middleware.Context, handler TriggerRegisterToServiceHandler) *TriggerRegisterToService {
	return &TriggerRegisterToService{Context: ctx, Handler: handler}
}

/*TriggerRegisterToService swagger:route POST /sendregister register triggerRegisterToService

User sends register request to another user and kick off election to get the new coordinator

*/
type TriggerRegisterToService struct {
	Context *middleware.Context
	Handler TriggerRegisterToServiceHandler
}

func (o *TriggerRegisterToService) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTriggerRegisterToServiceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
