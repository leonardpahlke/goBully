// Code generated by go-swagger; DO NOT EDIT.

package election

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ElectionMessageHandlerFunc turns a function with the right signature into a election message handler
type ElectionMessageHandlerFunc func(ElectionMessageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ElectionMessageHandlerFunc) Handle(params ElectionMessageParams) middleware.Responder {
	return fn(params)
}

// ElectionMessageHandler interface for that can handle valid election message params
type ElectionMessageHandler interface {
	Handle(ElectionMessageParams) middleware.Responder
}

// NewElectionMessage creates a new http.Handler for the election message operation
func NewElectionMessage(ctx *middleware.Context, handler ElectionMessageHandler) *ElectionMessage {
	return &ElectionMessage{Context: ctx, Handler: handler}
}

/*ElectionMessage swagger:route POST /election election electionMessage

handle election algorithm state

*/
type ElectionMessage struct {
	Context *middleware.Context
	Handler ElectionMessageHandler
}

func (o *ElectionMessage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewElectionMessageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
