// Code generated by go-swagger; DO NOT EDIT.

package election

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// StartElectionMessageHandlerFunc turns a function with the right signature into a start election message handler
type StartElectionMessageHandlerFunc func(StartElectionMessageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StartElectionMessageHandlerFunc) Handle(params StartElectionMessageParams) middleware.Responder {
	return fn(params)
}

// StartElectionMessageHandler interface for that can handle valid start election message params
type StartElectionMessageHandler interface {
	Handle(StartElectionMessageParams) middleware.Responder
}

// NewStartElectionMessage creates a new http.Handler for the start election message operation
func NewStartElectionMessage(ctx *middleware.Context, handler StartElectionMessageHandler) *StartElectionMessage {
	return &StartElectionMessage{Context: ctx, Handler: handler}
}

/*StartElectionMessage swagger:route POST /startelection election startElectionMessage

execute election algorithm

*/
type StartElectionMessage struct {
	Context *middleware.Context
	Handler StartElectionMessageHandler
}

func (o *StartElectionMessage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStartElectionMessageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
