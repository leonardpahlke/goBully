// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This project implements the bully algorithm with docker containers.\nSeveral containers are served, each of which is accessible with a rest API.\nFor more information, see the code comments",
    "title": "gBully API",
    "termsOfService": "there are no TOS at this moment, use at your own risk we take no responsibility",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.2.0"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/election": {
      "post": {
        "description": "handle election algorithm state",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "election"
        ],
        "operationId": "electionMessage",
        "parameters": [
          {
            "description": "election algorithm - get a coordinator",
            "name": "election",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InformationElectionDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InformationElectionDTO"
            }
          },
          "403": {
            "description": "operation not available"
          },
          "404": {
            "description": "error in operation"
          }
        }
      }
    },
    "/register": {
      "post": {
        "description": "Register User information to service",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "register"
        ],
        "operationId": "registerService",
        "parameters": [
          {
            "description": "send register information to get in the network",
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterInfoDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RegisterResponseDTO"
            }
          },
          "403": {
            "description": "operation not available"
          },
          "404": {
            "description": "error in operation"
          }
        }
      }
    },
    "/sendregister": {
      "post": {
        "description": "User sends register request to another user and kick off election to get the new coordinator",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "register"
        ],
        "operationId": "triggerRegisterToService",
        "parameters": [
          {
            "description": "start election algorithm - to get a coordinator",
            "name": "electionInformation",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InformationElectionDTO"
            }
          },
          {
            "type": "number",
            "description": "trigger registration, service sends registration message to other",
            "name": "ip",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "403": {
            "description": "operation not available"
          },
          "404": {
            "description": "error in operation"
          }
        }
      }
    },
    "/sendunregister": {
      "post": {
        "description": "unregister yourself from other user service user lists",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "register"
        ],
        "operationId": "sendUnregisterToServices",
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "403": {
            "description": "operation not available"
          },
          "404": {
            "description": "error in operation"
          }
        }
      }
    },
    "/startelection": {
      "post": {
        "description": "execute election algorithm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "election"
        ],
        "operationId": "startElectionMessage",
        "parameters": [
          {
            "description": "start election algorithm - to get a coordinator",
            "name": "election",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InformationElectionDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InformationElectionDTO"
            }
          },
          "403": {
            "description": "operation not available"
          },
          "404": {
            "description": "error in operation"
          }
        }
      }
    },
    "/unregister": {
      "post": {
        "description": "unregister service from your user list",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "register"
        ],
        "operationId": "unregisterFromService",
        "parameters": [
          {
            "description": "some service is unregistering from all users, remove user from active users",
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InformationUserDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "403": {
            "description": "operation not available"
          },
          "404": {
            "description": "error in operation"
          }
        }
      }
    }
  },
  "definitions": {
    "InformationElectionDTO": {
      "description": "election state information",
      "type": "object",
      "required": [
        "algorithm",
        "payload",
        "identity",
        "job",
        "message"
      ],
      "properties": {
        "algorithm": {
          "description": "name of the algorithm used",
          "type": "string",
          "x-go-name": "Algorithm"
        },
        "identity": {
          "description": "uri of the identity sending this request",
          "type": "string",
          "x-go-name": "User"
        },
        "job": {
          "$ref": "#/definitions/InformationJobDTO"
        },
        "message": {
          "description": "something you want to tell the other one",
          "type": "string",
          "x-go-name": "Message"
        },
        "payload": {
          "description": "the payload for the current state of the algorithm",
          "type": "string",
          "x-go-name": "Payload"
        }
      },
      "x-go-package": "gobully/internal/election"
    },
    "InformationJobDTO": {
      "description": "election job details",
      "type": "object",
      "required": [
        "id",
        "task",
        "resource",
        "method",
        "data",
        "callback",
        "message"
      ],
      "properties": {
        "callback": {
          "description": "an url where the initiator can be reached with the results/token",
          "type": "string",
          "x-go-name": "Callback"
        },
        "data": {
          "description": "data to use/post for the task",
          "type": "string",
          "x-go-name": "Data"
        },
        "id": {
          "description": "some identity chosen by the initiator to identify this request",
          "type": "string",
          "x-go-name": "Id"
        },
        "message": {
          "description": "something you want to tell the other one",
          "type": "string",
          "x-go-name": "Message"
        },
        "method": {
          "description": "method to take â€“ if already known",
          "type": "string",
          "x-go-name": "Method"
        },
        "resource": {
          "description": "uri or url to resource where actions are required",
          "type": "string",
          "x-go-name": "Resource"
        },
        "task": {
          "description": "uri to the task to accomplish",
          "type": "string",
          "x-go-name": "Task"
        }
      },
      "x-go-package": "gobully/internal/election"
    },
    "InformationUserDTO": {
      "description": "identity info struct",
      "type": "object",
      "required": [
        "userId",
        "endpoint"
      ],
      "properties": {
        "endpoint": {
          "description": "user endpoint to send http request",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "userId": {
          "description": "user identification which should be unique",
          "type": "string",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "gobully/internal/identity"
    },
    "InformationUserInfoDTO": {
      "description": "get service user info",
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "coordinator": {
          "description": "set coordinator",
          "type": "string",
          "x-go-name": "Coordinator"
        },
        "users": {
          "description": "all user linked to the service",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InformationUserDTO"
          },
          "x-go-name": "Users"
        }
      },
      "x-go-package": "gobully/internal/identity"
    },
    "RegisterInfoDTO": {
      "description": "object sending id service to register yourself",
      "type": "object",
      "required": [
        "distributing_user_id",
        "new_user_id",
        "endpoint"
      ],
      "properties": {
        "distributing_user_id": {
          "description": "id sending new id information (new userId or some other userId)",
          "type": "string",
          "x-go-name": "DistributingUserId"
        },
        "endpoint": {
          "description": "new userId endpoint",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "new_user_id": {
          "description": "new userId id, check if Distributing user is also new one to notify others if so",
          "type": "string",
          "x-go-name": "NewUserId"
        }
      },
      "x-go-package": "gobully/internal/service"
    },
    "RegisterResponseDTO": {
      "description": "response object after register to id service",
      "type": "object",
      "required": [
        "message",
        "user_id_infos"
      ],
      "properties": {
        "message": {
          "description": "dummy message to print response",
          "type": "string",
          "x-go-name": "Message"
        },
        "user_id_infos": {
          "description": "all registered users",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InformationUserDTO"
          },
          "x-go-name": "UserIdInfos"
        }
      },
      "x-go-package": "gobully/internal/service"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This project implements the bully algorithm with docker containers.\nSeveral containers are served, each of which is accessible with a rest API.\nFor more information, see the code comments",
    "title": "gBully API",
    "termsOfService": "there are no TOS at this moment, use at your own risk we take no responsibility",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.2.0"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/election": {
      "post": {
        "description": "handle election algorithm state",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "election"
        ],
        "operationId": "electionMessage",
        "parameters": [
          {
            "description": "election algorithm - get a coordinator",
            "name": "election",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InformationElectionDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InformationElectionDTO"
            }
          },
          "403": {
            "description": "operation not available"
          },
          "404": {
            "description": "error in operation"
          }
        }
      }
    },
    "/register": {
      "post": {
        "description": "Register User information to service",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "register"
        ],
        "operationId": "registerService",
        "parameters": [
          {
            "description": "send register information to get in the network",
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterInfoDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RegisterResponseDTO"
            }
          },
          "403": {
            "description": "operation not available"
          },
          "404": {
            "description": "error in operation"
          }
        }
      }
    },
    "/sendregister": {
      "post": {
        "description": "User sends register request to another user and kick off election to get the new coordinator",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "register"
        ],
        "operationId": "triggerRegisterToService",
        "parameters": [
          {
            "description": "start election algorithm - to get a coordinator",
            "name": "electionInformation",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InformationElectionDTO"
            }
          },
          {
            "type": "number",
            "description": "trigger registration, service sends registration message to other",
            "name": "ip",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "403": {
            "description": "operation not available"
          },
          "404": {
            "description": "error in operation"
          }
        }
      }
    },
    "/sendunregister": {
      "post": {
        "description": "unregister yourself from other user service user lists",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "register"
        ],
        "operationId": "sendUnregisterToServices",
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "403": {
            "description": "operation not available"
          },
          "404": {
            "description": "error in operation"
          }
        }
      }
    },
    "/startelection": {
      "post": {
        "description": "execute election algorithm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "election"
        ],
        "operationId": "startElectionMessage",
        "parameters": [
          {
            "description": "start election algorithm - to get a coordinator",
            "name": "election",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InformationElectionDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InformationElectionDTO"
            }
          },
          "403": {
            "description": "operation not available"
          },
          "404": {
            "description": "error in operation"
          }
        }
      }
    },
    "/unregister": {
      "post": {
        "description": "unregister service from your user list",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "register"
        ],
        "operationId": "unregisterFromService",
        "parameters": [
          {
            "description": "some service is unregistering from all users, remove user from active users",
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InformationUserDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "403": {
            "description": "operation not available"
          },
          "404": {
            "description": "error in operation"
          }
        }
      }
    }
  },
  "definitions": {
    "InformationElectionDTO": {
      "description": "election state information",
      "type": "object",
      "required": [
        "algorithm",
        "payload",
        "identity",
        "job",
        "message"
      ],
      "properties": {
        "algorithm": {
          "description": "name of the algorithm used",
          "type": "string",
          "x-go-name": "Algorithm"
        },
        "identity": {
          "description": "uri of the identity sending this request",
          "type": "string",
          "x-go-name": "User"
        },
        "job": {
          "$ref": "#/definitions/InformationJobDTO"
        },
        "message": {
          "description": "something you want to tell the other one",
          "type": "string",
          "x-go-name": "Message"
        },
        "payload": {
          "description": "the payload for the current state of the algorithm",
          "type": "string",
          "x-go-name": "Payload"
        }
      },
      "x-go-package": "gobully/internal/election"
    },
    "InformationJobDTO": {
      "description": "election job details",
      "type": "object",
      "required": [
        "id",
        "task",
        "resource",
        "method",
        "data",
        "callback",
        "message"
      ],
      "properties": {
        "callback": {
          "description": "an url where the initiator can be reached with the results/token",
          "type": "string",
          "x-go-name": "Callback"
        },
        "data": {
          "description": "data to use/post for the task",
          "type": "string",
          "x-go-name": "Data"
        },
        "id": {
          "description": "some identity chosen by the initiator to identify this request",
          "type": "string",
          "x-go-name": "Id"
        },
        "message": {
          "description": "something you want to tell the other one",
          "type": "string",
          "x-go-name": "Message"
        },
        "method": {
          "description": "method to take â€“ if already known",
          "type": "string",
          "x-go-name": "Method"
        },
        "resource": {
          "description": "uri or url to resource where actions are required",
          "type": "string",
          "x-go-name": "Resource"
        },
        "task": {
          "description": "uri to the task to accomplish",
          "type": "string",
          "x-go-name": "Task"
        }
      },
      "x-go-package": "gobully/internal/election"
    },
    "InformationUserDTO": {
      "description": "identity info struct",
      "type": "object",
      "required": [
        "userId",
        "endpoint"
      ],
      "properties": {
        "endpoint": {
          "description": "user endpoint to send http request",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "userId": {
          "description": "user identification which should be unique",
          "type": "string",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "gobully/internal/identity"
    },
    "InformationUserInfoDTO": {
      "description": "get service user info",
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "coordinator": {
          "description": "set coordinator",
          "type": "string",
          "x-go-name": "Coordinator"
        },
        "users": {
          "description": "all user linked to the service",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InformationUserDTO"
          },
          "x-go-name": "Users"
        }
      },
      "x-go-package": "gobully/internal/identity"
    },
    "RegisterInfoDTO": {
      "description": "object sending id service to register yourself",
      "type": "object",
      "required": [
        "distributing_user_id",
        "new_user_id",
        "endpoint"
      ],
      "properties": {
        "distributing_user_id": {
          "description": "id sending new id information (new userId or some other userId)",
          "type": "string",
          "x-go-name": "DistributingUserId"
        },
        "endpoint": {
          "description": "new userId endpoint",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "new_user_id": {
          "description": "new userId id, check if Distributing user is also new one to notify others if so",
          "type": "string",
          "x-go-name": "NewUserId"
        }
      },
      "x-go-package": "gobully/internal/service"
    },
    "RegisterResponseDTO": {
      "description": "response object after register to id service",
      "type": "object",
      "required": [
        "message",
        "user_id_infos"
      ],
      "properties": {
        "message": {
          "description": "dummy message to print response",
          "type": "string",
          "x-go-name": "Message"
        },
        "user_id_infos": {
          "description": "all registered users",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InformationUserDTO"
          },
          "x-go-name": "UserIdInfos"
        }
      },
      "x-go-package": "gobully/internal/service"
    }
  }
}`))
}
