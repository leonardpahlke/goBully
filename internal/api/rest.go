package api

import (
	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	_ "github.com/swaggo/gin-swagger/example/basic/docs" // docs is generated by Swag CLI, you have to import it.
	"gobully/internal/election"
	"gobully/internal/service"
)

// message if endpoint is not setup yet
const serviceUnavailableATM = "this service is not available at the moment"

// @title GoBully user service REST API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v2
func StartAPI(endpoint string, port string) {
	// create api server - gin framework
	r := gin.New()
	url := ginSwagger.URL(endpoint + "/swagger/doc.json") // The url pointing to API definition

	// API ENDPOINTS
	// swagger documentation
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))
	// new user register information
	r.POST(service.RegisterRoute, handleRegisterService)
	// trigger user register
	r.POST("/send-register/:ip", handleTriggerRegisterService)
	// trigger user unregister from other user services
	r.POST("/un-register", handleTriggerUnRegisterFromServices)
	// election algorithm endpoint
	r.POST(election.RouteElection, handleElection)

	// start api server
	err := r.Run(":" + port)
	if err != nil {
		logrus.Fatalf("[api.StartAPI] Error running server with error %s", err)
	}
}

/*
POST handle REGISTER SERVICE
 */
func handleRegisterService(c *gin.Context) {
	var serviceRegisterInfo service.RegisterInfo
	err := c.BindJSON(&serviceRegisterInfo)
	if err != nil {
		logrus.Fatalf("[api.StartAPI] Error marshal serviceRegisterInfo with error %s", err)
	}
	serviceRegisterResponse := service.ReceiveServiceRegister(serviceRegisterInfo)
	// return all registered users to new user
	c.JSON(200, serviceRegisterResponse)
}

/*
POST handle TRIGGER REGISTER TO SERVICE
*/
func handleTriggerRegisterService(c *gin.Context) {
	// send post request to other endpoint to trigger connection cycle
	ip, _ := c.Params.Get("ip")
	msg := service.RegisterToService(ip)
	// response check only if request was success full and has no further impact
	c.String(200, msg)
}

/*
POST handle TRIGGER UNREGISTER FROM SERVICE'S
unregister yourself from other user services (gracefully shutdown)
*/
func handleTriggerUnRegisterFromServices(c *gin.Context) {
	// TODO unregister user service
	c.String(403, serviceUnavailableATM)
}

/*
POST handle election algorithm state
election algorithm - get a coordinator
 */
func handleElection(c *gin.Context) {
	// TODO election
	c.String(403, serviceUnavailableATM)
}