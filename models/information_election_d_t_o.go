// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InformationElectionDTO election state information
//
// swagger:model InformationElectionDTO
type InformationElectionDTO struct {

	// name of the algorithm used
	// Required: true
	Algorithm *string `json:"algorithm"`

	// something you want to tell the other one
	// Required: true
	Message *string `json:"message"`

	// the payload for the current state of the algorithm
	// Required: true
	Payload *string `json:"payload"`

	// uri of the identity sending this request
	// Required: true
	User *string `json:"identity"`

	// job
	// Required: true
	Job *InformationJobDTO `json:"job"`
}

// Validate validates this information election d t o
func (m *InformationElectionDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJob(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InformationElectionDTO) validateAlgorithm(formats strfmt.Registry) error {

	if err := validate.Required("algorithm", "body", m.Algorithm); err != nil {
		return err
	}

	return nil
}

func (m *InformationElectionDTO) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *InformationElectionDTO) validatePayload(formats strfmt.Registry) error {

	if err := validate.Required("payload", "body", m.Payload); err != nil {
		return err
	}

	return nil
}

func (m *InformationElectionDTO) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("identity", "body", m.User); err != nil {
		return err
	}

	return nil
}

func (m *InformationElectionDTO) validateJob(formats strfmt.Registry) error {

	if err := validate.Required("job", "body", m.Job); err != nil {
		return err
	}

	if m.Job != nil {
		if err := m.Job.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InformationElectionDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InformationElectionDTO) UnmarshalBinary(b []byte) error {
	var res InformationElectionDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
