// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InformationJobDTO election job details
//
// swagger:model InformationJobDTO
type InformationJobDTO struct {

	// an url where the initiator can be reached with the results/token
	// Required: true
	Callback *string `json:"callback"`

	// data to use/post for the task
	// Required: true
	Data *string `json:"data"`

	// some identity chosen by the initiator to identify this request
	// Required: true
	ID *string `json:"id"`

	// something you want to tell the other one
	// Required: true
	Message *string `json:"message"`

	// method to take â€“ if already known
	// Required: true
	Method *string `json:"method"`

	// uri or url to resource where actions are required
	// Required: true
	Resource *string `json:"resource"`

	// uri to the task to accomplish
	// Required: true
	Task *string `json:"task"`
}

// Validate validates this information job d t o
func (m *InformationJobDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallback(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InformationJobDTO) validateCallback(formats strfmt.Registry) error {

	if err := validate.Required("callback", "body", m.Callback); err != nil {
		return err
	}

	return nil
}

func (m *InformationJobDTO) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	return nil
}

func (m *InformationJobDTO) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *InformationJobDTO) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *InformationJobDTO) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	return nil
}

func (m *InformationJobDTO) validateResource(formats strfmt.Registry) error {

	if err := validate.Required("resource", "body", m.Resource); err != nil {
		return err
	}

	return nil
}

func (m *InformationJobDTO) validateTask(formats strfmt.Registry) error {

	if err := validate.Required("task", "body", m.Task); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InformationJobDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InformationJobDTO) UnmarshalBinary(b []byte) error {
	var res InformationJobDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
